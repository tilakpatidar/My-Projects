/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package desktop;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.HashMap;

/**
 *
 * @author tilak
 */
public class Terminal{
    private static String bash;
    private static final Logger log;
    private static final String LINUX_SHELL="/bin/bash";
    private static final String WIN_SHELL="cmd";
    private static final String MAC_SHELL="";
    private static String EOL="\n";
    private static String ROOT_PSWD="PC";
    private static String CONT;
    private static String CD_ERROR;
    private ProcessBuilder builder;
    private Process p;
    private  BufferedWriter stdin;
    private BufferedReader stderr;
    private String id;
    private static String PWD;
    private static String PWD_COMMAND;
    Terminal(String id){
        //this.InputCache="";
        this.id=id;
        try {
            this.builder= new ProcessBuilder(Terminal.bash);
            builder.redirectErrorStream(true);
            this.p=builder.start();
        } catch (IOException ex) {
            Terminal.log.write(this.id+" : "+ex.getMessage());
        }
       this.stdin=new BufferedWriter(new OutputStreamWriter(this.p.getOutputStream()));
        
    }
    Terminal(){
        
       
    }
    static{
        setTerminalType();
        log=new Logger();
    }
   public static void setTerminalType(){
       String os= System.getProperty("os.name").toLowerCase();
       if(os.contains("linux")){
           Terminal.bash=LINUX_SHELL;
           Terminal.CONT="&&";
           Terminal.CD_ERROR="no such file or directory";
           Terminal.PWD=System.getProperty("user.home");
           Terminal.log.write("OS type detected is : Linux");
           
       }
       else if(os.contains("windows")){
           Terminal.bash=WIN_SHELL;
           Terminal.CONT="&";
           Terminal.CD_ERROR="the system cannot find the path specified";
           Terminal.PWD=System.getProperty("user.home");
           Terminal.log.write("OS type detected is : Windows");
       }
       else if(os.contains(MAC_SHELL)){
           Terminal.bash="";
           Terminal.PWD=System.getProperty("user.home");
           Terminal.log.write("OS type detected is : Mac");
       }
       else{
           Terminal.log.write("OS type detected is : Unknown");
           Terminal.bash="";
           Terminal.PWD=System.getProperty("user.home");
       }
       
   }
   public String execCommand(String commandXml){
       String command=this.parseXMLInput(commandXml);
       String result="";
       String pwd ="";
       String user;
       String hostname;
      String full_command = "";
      if (command.contains("sudo") && (System.getProperty("os.name").toLowerCase().contains("linux"))){
          full_command=Terminal.PWD_COMMAND+" "+Terminal.PWD+" "+Terminal.CONT+" "+"echo \""+Terminal.ROOT_PSWD+"\" | sudo -S"+" "+command+" "+Terminal.CONT+" echo \"###pwd###\" "+Terminal.CONT+Terminal.PWD_COMMAND+Terminal.CONT+" echo \"###user###\" "+Terminal.CONT+"echo $USER"+Terminal.CONT+" echo \"###hostname###\" "+Terminal.CONT+"echo $HOSTNAME";
      }
      else{
          full_command=Terminal.PWD_COMMAND+" "+Terminal.PWD+" "+Terminal.CONT+" "+command+" "+Terminal.CONT+" echo \"###pwd###\" "+Terminal.CONT+Terminal.PWD_COMMAND+Terminal.CONT+" echo \"###user###\" "+Terminal.CONT+"echo $USER"+Terminal.CONT+" echo \"###hostname###\" "+Terminal.CONT+"echo $HOSTNAME";
      }
      System.out.println(full_command);
        try {
           this.stdin.write(full_command);
           this.stdin.flush();
           this.stdin.close();
           
        } catch (IOException ex) {
            Terminal.log.write(this.id+" : "+ex.getMessage());
        }
        BufferedReader input=new BufferedReader(new InputStreamReader(this.p.getInputStream()));
        try {
            String line;
            while ((line=input.readLine())!=null){
                result+=line;
            }
          //  input.close();
        } catch (IOException ex) {
            Terminal.log.write(this.id+" : "+ex.getMessage());
        }
        //Not returning error just logging
        BufferedReader error=new BufferedReader(new InputStreamReader(this.p.getErrorStream()));
        try {
            String errorString="";
            String line1;
            while ((line1=error.readLine())!=null){
                errorString+=line1;
            }
            System.out.print(errorString);
        } catch (IOException ex) {
            Terminal.log.write(this.id+" : "+ex.getMessage());
        }
        //parsing our result to get keys
        
        String[] temp=result.split("###pwd###");
        String output=temp[0];
        String[] temp1=temp[1].split("###user###");
        pwd=temp1[0];
        String[] temp2=temp1[1].split("###hostname###");
        user=temp2[0];
        hostname=temp2[1];
        //Reinializing stdin
      //  this.stdin=new BufferedWriter(new OutputStreamWriter(this.p.getOutputStream()));
        this.restartBash();
        HashMap<String,String> map=new HashMap();
        map.put("output",output);
        map.put("pwd",pwd);
        map.put("command",command);
        map.put("user",user);
        map.put("hostname",hostname);
        result=this.buildXMLOutput(map);
        return result;
       
   }
   public void restartBash(){
     //  this.InputCache="";
       
        try {
            this.builder= new ProcessBuilder(Terminal.bash);
            builder.redirectErrorStream(true);
            this.p=builder.start();
        } catch (IOException ex) {
            Terminal.log.write(this.id+" : "+ex.getMessage());
        }
       this.stdin=new BufferedWriter(new OutputStreamWriter(this.p.getOutputStream()));
   }
   public String parseXMLInput(String xml){
       /*
       
       INput given is 
       
       <terminal id="">
       <command>
       
       </command>
       </terminal>
       
       
       */
       
       
      String command;
        String[] temp=xml.split("<command>");
        command=temp[1].replace("</command>","").replace("</terminal>","");
        return command;
        /*
        
        Output is only command in string
        */
       
   }
   public String buildXMLOutput(HashMap<String,String> result){
       
       /*
       Input is a hashmap
       
       Aim is to build
       <terminal id="">
       <command></command>
       <output></output>
        <user></user>
       <hostname></hostname>
       <pwd></pwd>
       </terminal>
       */
       String id=this.id;
       String command=result.get("command");
       String output=result.get("output");
       String user=result.get("user");
       String hostname=result.get("hostname");
       String pwd=result.get("pwd");
       String xml="<terminal id=\""+id+"\""+"><command>"+command+"</command><output>"+output+"</output><user>"+user+"</user><hostname>"+hostname+"</hostname><pwd>"+pwd+"</pwd></terminal>";
       return xml;
   }

 
}


import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/*in board med 10 sec time for each move + 3 min to win */
/**
 *
 * @author tilak
 */
public class Board_med extends javax.swing.JFrame {
    int sb1=0,sb2=0,sb3=0,sb4=0,turn=0; //0 for user and 1 for cpu
     Timer1 obj1=new Timer1();   //timer for player 2
      Thread thread1=new Thread(obj1);
     
      Timer2 obj2=new Timer2();  //timer for player 1
      Thread thread2=new Thread(obj2);
      
       Timer3 obj3=new Timer3();  //timer for game
      Thread thread3=new Thread(obj3);
    /**
     * Creates new form Board_med
     */
    public Board_med() {
        initComponents();
         Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
       int w = this.getSize().width;
        int h = this.getSize().height;
        int x = (dim.width-w)/2;
        int y = (dim.height-h)/2;
        this.setLocation(x, y);
        
     p1=JOptionPane.showInputDialog("Enter player 1 name !");
        p2=JOptionPane.showInputDialog("Enter player 2 name !");
        try{
            if(p1.equals(p2))
        {
            JOptionPane.showMessageDialog(this,"Player names cannot be same !");
          
        }
        
        else
        {
        jLabel1.setText(p1);
        jLabel2.setText(p2);
        }
        }
        catch(Exception e)
        {
            p1="Player 1";
            p2="Player 2";
            jLabel1.setText(p1);
        jLabel2.setText(p2);
        }
       thread2.start();
       thread1.start();
       thread1.suspend();
      thread3.start();
        
    }
   
    
   static String p1;
   static String p2;
   
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pb1 = new javax.swing.JButton();
        pb2 = new javax.swing.JButton();
        cb1 = new javax.swing.JButton();
        cb2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pb1.setText("1");
        pb1.setName("1"); // NOI18N
        pb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pb1ActionPerformed(evt);
            }
        });

        pb2.setText("1");
        pb2.setName("1"); // NOI18N
        pb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pb2ActionPerformed(evt);
            }
        });

        cb1.setText("1");
        cb1.setName("1"); // NOI18N
        cb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb1ActionPerformed(evt);
            }
        });

        cb2.setText("1");
        cb2.setName("1"); // NOI18N
        cb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb2ActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Player 1");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("Player 2");

        jLabel3.setText("0");

        jLabel4.setText("sec");

        jLabel5.setText("0");

        jLabel6.setText("sec");

        jLabel8.setText("Time left");

        jLabel7.setText("180");

        jLabel9.setText("sec");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pb1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cb1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cb2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pb2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 186, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGap(167, 167, 167)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cb1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cb2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pb1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pb2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pb1ActionPerformed

    if((sb2==0&&sb3==0)&&(sb4==0&&turn==0))
 {
     sb1=1;
    
 }
else if((sb3==1||sb2==1)||(sb4==1))
 {
     sb1=1;
     Game obj=new Game();
    int a= obj.evalMove(sb1, sb2, sb3, sb4, "b1");
    turn=obj.turn(a);
    obj.result(a);
    System.out.println(turn);
  System.out.println(a);
    
     sb1=0;sb2=0;sb3=0;sb4=0;
     
     
 }
else if(turn==1)
 {
     JOptionPane.showMessageDialog(this,"It's not your turn !");
 }// TODO add your handling code here:
    }//GEN-LAST:event_pb1ActionPerformed

    private void pb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pb2ActionPerformed
 
 if((sb1==0&&sb3==0)&&(sb4==0&&turn==0)) //if this button is clicked ^
 {
     sb2=1;
   
 }
 else if((sb1==1||sb3==1)||(sb4==1))
 {
     sb2=1;
     
     Game obj=new Game();
    
     int a=obj.evalMove(sb1, sb2, sb3, sb4, "b2");
     
      turn=obj.turn(a);
      obj.result(a);
  System.out.println(turn);
  System.out.println(a);
   
     sb1=0;sb2=0;sb3=0;sb4=0;
     
     
 }
 else if(turn==1)
 {
     JOptionPane.showMessageDialog(this,"It's not your turn !");
 }
// TODO add your handling code here:
    }//GEN-LAST:event_pb2ActionPerformed

    private void cb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb1ActionPerformed
 if((sb1==0&&sb2==0)&&(sb4==0&&turn==1))
 {
     sb3=1;
 }
else if((sb1==1||sb2==1)||(sb4==1))
 {
     sb3=1;
     Game obj=new Game();
    int a= obj.evalMove(sb1, sb2, sb3, sb4, "b3");
     turn=obj.turn(a);
     obj.result(a);
  System.out.println(turn);
  System.out.println(a);
    
     sb1=0;sb2=0;sb3=0;sb4=0;
     
     
 }
 else if(turn==0)
 {
     JOptionPane.showMessageDialog(this,"It's not your turn !");
 }// TODO add your handling code here:
    }//GEN-LAST:event_cb1ActionPerformed

    private void cb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb2ActionPerformed
 if((sb1==0&&sb2==0)&&(sb3==0&&turn==1))
 {
     sb4=1;
 }
 else if((sb1==1||sb2==1)||(sb3==1))
 {
     sb4=1;
     Game obj=new Game();
   int a=obj.evalMove(sb1, sb2, sb3, sb4, "b4");
    turn=obj.turn(a);
    obj.result(a);
 System.out.println(turn);
  System.out.println(a);
     sb1=0;sb2=0;sb3=0;sb4=0;
     
     
 }
  else if(turn==0)
 {
     JOptionPane.showMessageDialog(this,"It's not your turn !");
 }
// TODO add your handling code here:
    }//GEN-LAST:event_cb2ActionPerformed
public class Timer1 implements Runnable{    //timer for player 2

        @Override
        public void run() {
                
            while(true)
            {
                
                    try {
                        
                        Thread.sleep(1000); //msec
                         
                          jLabel3.setText(""+(Integer.parseInt(jLabel3.getText())+1));
                if(Integer.parseInt(jLabel3.getText())==10)
                {
                    //you lost
                    JOptionPane.showMessageDialog(Board_med.this,"Time is up please try later !");
                    
                   Game a=new Game();
                   a.disableButtons();
                }
                else{
                
                }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Board_med.class.getName()).log(Level.SEVERE, null, ex);
                    }
                
              
            }
            
            
        }
    
}
public class Timer2 implements Runnable{  //timer for player 1

        @Override
        public void run() {
                
            while(true)
            {
                
                    try {
                        
                        Thread.sleep(1000); //msec
                        jLabel5.setText(""+(Integer.parseInt(jLabel5.getText())+1));
                if(Integer.parseInt(jLabel5.getText())==10)
                {
                    //you lost
                    JOptionPane.showMessageDialog(Board_med.this,"Time is up please try later !");
                   Game a=new Game();
                   a.disableButtons();
                }
                else{
                
                }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Board_med.class.getName()).log(Level.SEVERE, null, ex);
                    }
                
            }
            
            
        }
    
}
public class Timer3 implements Runnable{  //timer for game

        @Override
        public void run() {
                
            while(true)
            {
              
                    try {
                          
                        Thread.sleep(1000); //msec
                        jLabel7.setText(""+(Integer.parseInt(jLabel7.getText())-1));
                          if(Integer.parseInt(jLabel7.getText())==0) //3min game time
                {
                    //you lose
                    JOptionPane.showMessageDialog(Board_med.this,"Time is up please try later !");
                    
                   System.exit(0);
                    
                    
                }
                else{
              
                }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Board_hard.class.getName()).log(Level.SEVERE, null, ex);
                    }
               
                
               
                }
            
            
        }
}
    public class Game{
      void disableButtons()
        {
            pb1.setEnabled(false);
            pb2.setEnabled(false);
            cb1.setEnabled(false);
            cb2.setEnabled(false);
        }
       void enableButtons()
       {
           pb1.setEnabled(true);
            pb2.setEnabled(true);
            cb1.setEnabled(true);
            cb2.setEnabled(true);
       }
        int evalMove(int b1,int b2,int b3,int b4,String caller)
        {
            int move =105; //105 means no evaluation
            if((b1==1&&b2==1)&&(caller.equals("b2")))
            {
                move=120;
            }
            if((b1==1&&b2==1)&&(caller.equals("b1")))
            {
               move=210;
               
            }
            if((b1==1&&b3==1)&&(caller.equals("b3")))
            {
              move=130;
            }
            if((b1==1&&b3==1)&&(caller.equals("b1")))
            {
              move=311;
            }
            if((b1==1&&b4==1)&&(caller.equals("b4")))
            {
              move=140;
            }
            if((b1==1&&b4==1)&&(caller.equals("b1")))
            {
              move=411;
            }if((b2==1&&b3==1)&&(caller.equals("b3")))
            {
              move=230;
            }
            if((b2==1&&b3==1)&&(caller.equals("b2")))
            {
              move=321;
            }
            if((b2==1&&b4==1)&&(caller.equals("b4")))
            {
              move=240;
            }
            if((b2==1&&b4==1)&&(caller.equals("b2")))
            {
              move=421;
            }
            if((b3==1&&b4==1)&&(caller.equals("b3")))
            {
              move=431;
            }
             if((b3==1&&b4==1)&&(caller.equals("b4")))
            {
              move=341;
            }
            return move;
            
        }
        int turn(int move)
        {
            int a=move;
            String b=""+a;
            int index=b.length()-1;
            int end=Integer.parseInt(""+b.charAt(index));
            //System.out.println(end);
            
            return end;
        }
         void status_zero()
     {
         sb1=0;sb2=0;sb3=0;sb4=0;
     }
         void result(int move)
        {
             
           if(move==120) //r
           {
               int turn=turn(move);
               int allow1=invalidMove(move);
               int allow2=invalidMove2(move);
               if (allow1==1&&allow2==1)
               {
                
              int b1=Integer.parseInt(pb1.getName());
               int b2=Integer.parseInt(pb2.getName());
               if(b2==0)
               {
                   int input=JOptionPane.showConfirmDialog(Board_med.this,"Do you want to regenerate ?");
                   if(input==0)
                   {
                       if(b1%2==0)
                       {
                           int result=b1/2;
                           pb1.setName(""+result);
               pb1.setText(""+result);
                           pb2.setName(""+result);
               pb2.setText(""+result);
              
               win(turn,move);
               
               
                       }
                       else
                       {
                         if(turn==0)
                            {
                            JOptionPane.showMessageDialog(Board_med.this,"Can only regenerate even fingers !");
                            status_zero();
                            }
                            else if(turn==1)
                            {
                                status_zero();
                                JOptionPane.showMessageDialog(Board_med.this,"Invalid move !");
                            }
                        
                       }
                       
                       
                  
                   }
                   else if(input==1)
                   {
                       int result=b1+b2;
                            if (result>5)
                            {
                                result=Math.abs(result-5);
                            }
                         if(result==5)
                          {
                                result=0;
                           }
              
               
              
          
               pb2.setName(""+result);
               pb2.setText(""+result);
            
               win(turn,move);
               
               
                   
               } 
                else if(input==2)
                   {
                       status_zero();
                   }   
               }
                   
               
               else
               {
                   int result=b1+b2;
              if (result>5)
              {
                  result=Math.abs(result-5);
              }
           if(result==5)
            {
                  result=0;
             }
              
                  
              
           
               pb2.setName(""+result);
               pb2.setText(""+result);
              
               win(turn,move);
              
                 
               }
               }
               else if(allow1==0 || allow2==0)
               {
                  if(turn==0)
                   {
                   JOptionPane.showMessageDialog(Board_med.this,"Invalid move !");
                   status_zero();
                   }
                   else if(turn==1)
                   {
                       status_zero();
                       JOptionPane.showMessageDialog(Board_med.this,"Invalid move !");
                   }
               }
               
           }
        
           
           if(move==210)  //r
           {
                int turn=turn(move);
              int allow1=invalidMove(move);
               int allow2=invalidMove2(move);
               if (allow1==1&&allow2==1)
               {
              int b1=Integer.parseInt(pb1.getName());
               int b2=Integer.parseInt(pb2.getName());
               if(b1==0)
               {
                   int input=JOptionPane.showConfirmDialog(Board_med.this,"Do you want to regenerate ?");
                   if(input==0)
                   {
                       if(b2%2==0)
                       {
                           int result=b2/2;
                           pb1.setName(""+result);
                             pb1.setText(""+result);
                           pb2.setName(""+result);
                             pb2.setText(""+result);
               
                            win(turn,move);
                         }
              
                     
                      
                        else
                        {
                          if(turn==0)
                            {    
                                JOptionPane.showMessageDialog(Board_med.this,"Can only regenerate even fingers !");
                                status_zero();
                                }
                            else if(turn==1)
                            {
                                status_zero();
                                JOptionPane.showMessageDialog(Board_med.this,"Invalid move !");
                            }
                           
                       
                       
                  
                            }
                   }
                   else if(input==1)
                   {
                                int result=b1+b2;
                                if (result>5)
                                    {
                                        result=Math.abs(result-5);
                                    }
                                if(result==5)
                                 {
                                       result=0;
                                  }
              
                  
              
         
                    pb1.setName(""+result);
                    pb1.setText(""+result);

                    win(turn,move);
              
                  
                     }
                   
                   else if(input==2)
                     {
                         status_zero();
                       }
               }
               
               else
               {
                   int result=b1+b2;
                        if (result>5)
                        {
                            result=Math.abs(result-5);
                        }
                        if(result==5)
                         {
                               result=0;
                          }
              
                
           
               pb1.setName(""+result);
               pb1.setText(""+result);
               
               win(turn,move);
               }
              
                   
               
               }
               else if(allow1==0 || allow2==0)
               {
                  if(turn==0)
                   {
                   JOptionPane.showMessageDialog(Board_med.this,"Invalid move !");
                   status_zero();
                   }
                   else if(turn==1)
                   {
                       status_zero();
                       JOptionPane.showMessageDialog(Board_med.this,"Invalid move !");
                   }
               }
               
                   
           }
           if(move==130)
           {
               
                int turn=turn(move);
               int allow1=invalidMove(move);
               int allow2=invalidMove2(move);
               if (allow1==1&&allow2==1)
               {
               int b1=Integer.parseInt(pb1.getName());
                int b3=Integer.parseInt(cb1.getName());
                            int result=b1+b3;
                           if (result>5)
                          {
                              result=Math.abs(result-5);
                          }
                       if(result==5)
                        {
                              result=0;
                         }
              
                        cb1.setName(""+result);
                          cb1.setText(""+result);

                        win(turn,move);
               }
               else if(allow1==0 || allow2==0)
               {
                  if(turn==0)
                   {
                   JOptionPane.showMessageDialog(Board_med.this,"Invalid move !");
                   status_zero();
                   }
                   else if(turn==1)
                   {
                       status_zero();
                       JOptionPane.showMessageDialog(Board_med.this,"Invalid move !");
                   }
               }
           }
           if(move==311)
           {
                int turn=turn(move);
               int allow1=invalidMove(move);
               int allow2=invalidMove2(move);
               if (allow1==1&&allow2==1)
               {
               int b1=Integer.parseInt(pb1.getName());
                int b3=Integer.parseInt(cb1.getName());
                int result=b1+b3;
                if (result>5)
              {
                  result=Math.abs(result-5);
              }
           if(result==5)
            {
                  result=0;
             }
              
                pb1.setName(""+result);
                 pb1.setText(""+result);
                
               win(turn,move);
               }
               else if(allow1==0 || allow2==0)
               {
                   if(turn==0)
                   {
                   JOptionPane.showMessageDialog(Board_med.this,"Invalid move !");
                   status_zero();
                   }
                   else if(turn==1)
                   {
                       status_zero();
                       JOptionPane.showMessageDialog(Board_med.this,"Invalid move !");
                   }
               }
           }
           if(move==140)
           {
               int turn=turn(move);
               int allow1=invalidMove(move);
               int allow2=invalidMove2(move);
               if (allow1==1&&allow2==1)
               {
               int b1=Integer.parseInt(pb1.getName());
               int b4=Integer.parseInt(cb2.getName());
               
               int result=b1+b4;
               if (result>5)
              {
                  result=Math.abs(result-5);
              }
           if(result==5)
            {
                  result=0;
             }
              
                  
              
             
               cb2.setName(""+result);
               cb2.setText(""+result);
               
               win(turn,move);
               }
               else if(allow1==0 || allow2==0)
               {
                   if(turn==0)
                   {
                   JOptionPane.showMessageDialog(Board_med.this,"Invalid move !");
                   status_zero();
                   }
                   else if(turn==1)
                   {
                       status_zero();
                       JOptionPane.showMessageDialog(Board_med.this,"Invalid move !");
                   }
               }
           }
           if(move==411)
           {
               int turn=turn(move);
               int allow1=invalidMove(move);
               int allow2=invalidMove2(move);
               if (allow1==1&&allow2==1)
               {
               int b1=Integer.parseInt(pb1.getName());
               int b4=Integer.parseInt(cb2.getName());
               int result=b1+b4;
                        if (result>5)
                       {
                           result=Math.abs(result-5);
                       }
                    if(result==5)
                     {
                           result=0;
                      }
              
               pb1.setName(""+result);
               pb1.setText(""+result);
               
               win(turn,move);
               }
               else if(allow1==0 || allow2==0)
               {
                  if(turn==0)
                   {
                   JOptionPane.showMessageDialog(Board_med.this,"Invalid move !");
                   status_zero();
                   }
                   else if(turn==1)
                   {
                       status_zero();
                       JOptionPane.showMessageDialog(Board_med.this,"Invalid move !");
                   }
               }
           }
           if(move==230)   
           {
                int turn=turn(move);
               int allow1=invalidMove(move);
               int allow2=invalidMove2(move);
               if (allow1==1&&allow2==1)
               {
               int b2=Integer.parseInt(pb2.getName());
                int b3=Integer.parseInt(cb1.getName());
                int result=b3+b2;
                if (result>5)
              {
                  result=Math.abs(result-5);
              }
           if(result==5)
            {
                  result=0;
             }
              
               cb1.setName(""+result);
                 cb1.setText(""+result);
                
               win(turn,move);
               }
               else if(allow1==0 || allow2==0)
               {
                   if(turn==0)
                   {
                   JOptionPane.showMessageDialog(Board_med.this,"Invalid move !");
                   status_zero();
                   }
                   else if(turn==1)
                   {
                       status_zero();
                       JOptionPane.showMessageDialog(Board_med.this,"Invalid move !");
                   }
               }
           }
           if(move==321)
           {
                 int turn=turn(move);
               int allow1=invalidMove(move);
               int allow2=invalidMove2(move);
               if (allow1==1&&allow2==1)
               {
               int b2=Integer.parseInt(pb2.getName());
                int b3=Integer.parseInt(cb1.getName());
                int result=b3+b2;
                        if (result>5)
                      {
                          result=Math.abs(result-5);
                      }
                   if(result==5)
                    {
                          result=0;
                     }
              
                pb2.setName(""+result);
                   pb2.setText(""+result);
                 
               win(turn,move);
               }
               else if(allow1==0 || allow2==0)
               {
                  if(turn==0)
                   {
                   JOptionPane.showMessageDialog(Board_med.this,"Invalid move !");
                   status_zero();
                   }
                   else if(turn==1)
                   {
                       status_zero();
                       JOptionPane.showMessageDialog(Board_med.this,"Invalid move !");
                   }
               }
           }
          if(move==240)
          {
               int turn=turn(move);
               int allow1=invalidMove(move);
               int allow2=invalidMove2(move);
               if (allow1==1&&allow2==1)
               {
              int b2=Integer.parseInt(pb2.getName());
              int b4=Integer.parseInt(cb2.getName());
              int result=b4+b2;
                        if (result>5)
                        {
                            result=Math.abs(result-5);
                        }
                     if(result==5)
                      {
                            result=0;
                       }

                  
              
            
                        cb2.setName(""+result);
                         cb2.setText(""+result);
              
               win(turn,move);
               }
               else if(allow1==0 || allow2==0)
               {
                  if(turn==0)
                   {
                   JOptionPane.showMessageDialog(Board_med.this,"Invalid move !");
                   status_zero();
                   }
                   else if(turn==1)
                   {
                       status_zero();
                       JOptionPane.showMessageDialog(Board_med.this,"Invalid move !");
                   }
               }
          }
            if(move==421)
            {
                   int turn=turn(move);
                 int allow1=invalidMove(move);
               int allow2=invalidMove2(move);
               if (allow1==1&&allow2==1)       
                {
                int b2=Integer.parseInt(pb2.getName());
                int b4=Integer.parseInt(cb2.getName());
                int result=b4+b2;
                            if (result>5)
                          {
                              result=Math.abs(result-5);
                          }
                       if(result==5)
                        {
                              result=0;
                         }
                            pb2.setName(""+result);
                             pb2.setText(""+result);
                          
                           win(turn,move);
               }
               else if(allow1==0 || allow2==0)
               {
                  if(turn==0)
                   {
                   JOptionPane.showMessageDialog(Board_med.this,"Invalid move !");
                   status_zero();
                   }
                   else if(turn==1)
                   {
                       status_zero();
                       JOptionPane.showMessageDialog(Board_med.this,"Invalid move !");
                   }
               }
            }
        if(move==431)  //cpu r
        {
             int turn=turn(move);
               int allow1=invalidMove(move);
               int allow2=invalidMove2(move);
               if (allow1==1&&allow2==1)
               {
              int b4=Integer.parseInt(cb2.getName());
               int b3=Integer.parseInt(cb1.getName());
               if(b3==0)
               {
                   int input=JOptionPane.showConfirmDialog(Board_med.this,"Do you want to regenerate ?");
                   System.out.println("Value of input is "+input);
                   if(input==0)
                   {
                       if(b4%2==0)
                       {
                           int result=b4/2;
                           cb1.setName(""+result);
                            cb1.setText(""+result);
                           cb2.setName(""+result);
                             cb2.setText(""+result);
               
                             win(turn,move);
                         }
              
               
                       
                       else
                       {
                           if(turn==0)
                                {
                                JOptionPane.showMessageDialog(Board_med.this,"Can only regenerate even fingers !");
                                status_zero();
                                }
                                else if(turn==1)
                                {
                                    status_zero();
                                    JOptionPane.showMessageDialog(Board_med.this,"Invalid move !");
                                }
                          
                       }
                       
                       
                  
                   }
                   else if(input==1)
                   {
                       int result=b3+b4;
                        if (result>5)
                        {
                            result=Math.abs(result-5);
                        }
                     if(result==5)
                      {
                            result=0;
                       }
                  
              

                    cb1.setName(""+result);
                    cb1.setText(""+result);

                    win(turn,move);
               
              
                   }
                   
                   else if(input==2)
                   {
                       
                   }
               }
               else
               {
                   int result=b3+b4;
                        if (result>5)
                        {
                            result=Math.abs(result-5);
                        }
                     if(result==5)
                      {
                            result=0;
                       }
              
               cb1.setName(""+result);
               cb1.setText(""+result);//changed
               win(turn,move);
               }
               
               
               }
               else if(allow1==0 || allow2==0)
               {
                  if(turn==0)
                   {
                   JOptionPane.showMessageDialog(Board_med.this,"Invalid move !");
                   status_zero();
                   }
                   else if(turn==1)
                   {
                       status_zero();
                       JOptionPane.showMessageDialog(Board_med.this,"Invalid move !");
                   }
               }
               
        }
            if(move==341)  //cpu r
            {
                 int turn=turn(move);
              int allow1=invalidMove(move);
               int allow2=invalidMove2(move);
               if (allow1==1&&allow2==1)
               {
                int b4=Integer.parseInt(cb2.getName());
               int b3=Integer.parseInt(cb1.getName());
               if(b4==0)
               {
                   
                   int input=JOptionPane.showConfirmDialog(Board_med.this,"Do you want to regenerate ?");
                   System.out.println("Value of input is "+input);
                   if(input==0)
                   {
                       if(b3%2==0)
                       {
                           int result=b3/2;
                           cb1.setName(""+result);
                             cb1.setText(""+result);
                           cb2.setName(""+result);
                            cb2.setText(""+result);
              
                            win(turn,move);
                        }
              
               
                         
                        else
                         {
                           if(turn==0)
                            {
                            JOptionPane.showMessageDialog(Board_med.this,"Can only regenerate even fingers !");
                            status_zero();
                            }
                            else if(turn==1)
                            {
                                status_zero();
                                JOptionPane.showMessageDialog(Board_med.this,"Invalid move !");
                            }
                          
                         }
                       
                       
                  
                   }
                   else if(input==1)
                   {
                       int result=b3+b4;
              
                                    if (result>5)
                                    {
                                        result=Math.abs(result-5);
                                    }
                                 if(result==5)
                                  {
                                        result=0;
                                   }
                
                    cb2.setName(""+result);
                    cb2.setText(""+result);
               win(turn,move);
             
               
                   }
                   
                   else if(input==2)
                   {
                       status_zero();
                   }
               }
               else
               {
                   int result=b3+b4;
                        if (result>5)
                        {
                            result=Math.abs(result-5);
                        }
                     if(result==5)
                      {
                            result=0;
                       }
              

                    cb2.setName(""+result);
                    cb2.setText(""+result);
             
                        win(turn,move);
              
               }
               }
               else if(allow1==0 || allow2==0)
               {
                  if(turn==0)
                   {
                   JOptionPane.showMessageDialog(Board_med.this,"Invalid move !");
                   status_zero();
                   }
                   else if(turn==1)
                   {
                       status_zero();
                       JOptionPane.showMessageDialog(Board_med.this,"Invalid move !");
                   }
               }
                }
        }
        int invalidMove(int a)
        {
            int r=0;
          String c=""+a;
            if(c.charAt(0)=='1')
            {
                int d=Integer.parseInt(pb1.getText());
                if(d==0)
                {
                   r=0;
                }
                else
                {
                    r=1;
                }
            }
            else if(c.charAt(0)=='2')
            {
                int d=Integer.parseInt(pb2.getText());
                if(d==0)
                {
                     r=0;
                }
                 else
                {
                    r=1;
                }
            }
            else if(c.charAt(0)=='3')
            {
                int d=Integer.parseInt(cb1.getText());
                if(d==0)
                {
                     r=0;
                }
                 else
                {
                    r=1;
                }
            }
            else if(c.charAt(0)=='4')
            {
                int d=Integer.parseInt(cb2.getText());
                if(d==0)
                {
                     r=0;
                }
                 else
                {
                    r=1;
                }
                
            }
             
            System.out.println("r is "+r);
            return r;
            
        }
        int invalidMove2(int a)
        {
            int r = 1;
            String c=""+a;
            if(c.charAt(0)=='1'&&c.charAt(1)=='3')
            {
                int d=Integer.parseInt(cb1.getText());
                if(d==0)
                {
                     r=0;
                }
                 else
                {
                    r=1;
                }
                
            }
            else if(c.charAt(0)=='1'&&c.charAt(1)=='4')
            {
                int d=Integer.parseInt(cb2.getText());
                if(d==0)
                {
                     r=0;
                }
                 else
                {
                    r=1;
                }
                
            }
            else if(c.charAt(0)=='2'&&c.charAt(1)=='3')
            {
                int d=Integer.parseInt(cb1.getText());
                if(d==0)
                {
                     r=0;
                }
                 else
                {
                    r=1;
                }
                
            }
            else if(c.charAt(0)=='2'&&c.charAt(1)=='4')
            {
                int d=Integer.parseInt(cb2.getText());
                if(d==0)
                {
                     r=0;
                }
                 else
                {
                    r=1;
                }
                
            }
            else if(c.charAt(0)=='3'&&c.charAt(1)=='1')
            {
                int d=Integer.parseInt(pb1.getText());
                if(d==0)
                {
                     r=0;
                }
                 else
                {
                    r=1;
                }
                
            }
            else if(c.charAt(0)=='3'&&c.charAt(1)=='2')
            {
                int d=Integer.parseInt(pb2.getText());
                if(d==0)
                {
                     r=0;
                }
                 else
                {
                    r=1;
                }
                
            }
            else if(c.charAt(0)=='4'&&c.charAt(1)=='1')
            {
                int d=Integer.parseInt(pb1.getText());
                if(d==0)
                {
                     r=0;
                }
                 else
                {
                    r=1;
                }
                
            }
            else if(c.charAt(0)=='4'&&c.charAt(1)=='2')
            {
                int d=Integer.parseInt(pb2.getText());
                if(d==0)
                {
                     r=0;
                }
                 else
                {
                    r=1;
                }
                
            }
            return r;
        }
    void win(int c,int chutityapa)
    {
        if(c==0)
        {
            int a=Integer.parseInt(cb1.getName());
            int b=Integer.parseInt(cb2.getName());
           if(a==0&&b==0)
           {
                thread2.stop();
               thread1.stop();
               thread3.stop();
               JOptionPane.showMessageDialog(Board_med.this,"Congratulations " +Board_med.p1+" you won !!!");
              disableButtons();
           }else
           {
               turn=1;
               thread2.suspend();
               jLabel3.setText("0");
               jLabel5.setText("0");
           thread1.resume();
           }
           
        }
        else if(c==1)
        {
            int a=Integer.parseInt(pb1.getName());
            int b=Integer.parseInt(pb2.getName());
           if(a==0&&b==0)
           {
               thread2.stop();
               thread1.stop();
               thread3.stop();
               JOptionPane.showMessageDialog(Board_med.this,"Congratulations " +Board_med.p2+" you won !!!");
               disableButtons();
           }
           else
           {
               turn=0;
                thread1.suspend();
                jLabel3.setText("0");
               jLabel5.setText("0");
           thread2.resume();
           }
          
        }
    }
     int[] counterMove(int lh,int rh)
    {
        return null;
    }
}
public class Cpumove extends Game{
    int[] hard(int lh,int rh)
    {
        this.counterMove(lh, rh);
        return null;
        
    }
     int[] med(int lh,int rh)
    {
        this.counterMove(lh, rh);
        return null;
    } int[] easy(int lh,int rh)
    {
        this.counterMove(lh, rh);
        return null;
    }
     
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Board_med.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Board_med.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Board_med.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Board_med.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Board_med().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cb1;
    private javax.swing.JButton cb2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton pb1;
    private javax.swing.JButton pb2;
    // End of variables declaration//GEN-END:variables
}
